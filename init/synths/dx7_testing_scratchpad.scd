/*

Example usage of the DX7 Clone, DX7-P

---------------------------------------------------------------------
Original author: Aziz Ege Gonul (www.egegonul.com)
Edits and additions: Scott Eric Petersen (www.scottericpetersen.com)
Version: 1.1
License: GNU GPL 3 as per SuperCollider license
---------------------------------------------------------------------

The below code demonstrates how to audition presets, post synthdefs for the various presets to the post window, and write both the synthdefs and analysis of the algorithm to a local file. Preset names can be found in the DX7-SC PDF document included in the main folder.

Basic Usage:

Audition presets by running 1. below, then running the fork expression under 2. You can enter a flag, or leave it blank to audition presets. Entering the \def or \write flags will post two SynthDefs to the post window. You can copy these to a new file, or in the case of \write, they are written to a file for you. You can then use them in your own code. To use the code effectively you must:

1) Be sure the buses exist (by running 1. first)
2) Instantiate the \InfEfx_nnn synth first
3) Instantiate the \DX7_nnn synth being sure to add it to the tail of the group.

The code in examples 3 and 4 below demonstrate use.

*/


/* -- 1 -- Initialize the generation functions 

Please note that the buses instantiated below (~busMeAmp) are hard-coded into the SynthDef that is generated by 
DX-7. When copying and saving synthdefs, it will be necessary to change these names to individual buses
unique to each SynthDef to avoid overwriting data and altering sounds.

*/

~h = Object.new('b')
~h.put('2',"huh")
~h.get('2')

( // init
s.waitForBoot {
	~busMeAmp = Bus.audio(s, 1); // private buses used for LFO pitch and amplitudes
	~busMePitch = Bus.audio(s, 1); // " "
	~mainCaller = ("/Users/will/gitStuff/DX7-P/DX7-P.scd").load;
	// ~mainCaller = ("/tmp/scdx7.scd").load;
}
)


( // init
	~busMeAmp = Bus.audio(s, 1); // private buses used for LFO pitch and amplitudes
	~busMePitch = Bus.audio(s, 1); // " "
	~mainCaller = ("/Users/will/gitStuff/DX7-P/DX7-P.scd").load;
	// ~mainCaller = ("/tmp/scdx7.scd").load;
)

~mainCaller

~mainCaller = ("/Users/will/gitStuff/DX7-P/dx7.scd").load;


/* -- 2 -- Audition presets: choose a MIDI note number (pitch), velocity, and preset number here.

The following will generate synthdef parameters and register those synthdefs based on your preset.

To audition sounds (only hear presets), do not pass a flag option. The preset will play for 3 seconds and then be freed.

Otherwise, you can pass the following options (as symbols) for the flag argument:

\def = generate human-readable synthdefs and post them for copying/saving/changing. Enables use cases shown below in --3-- and --4--.

\analysis = print analysis of the CM configuration to the window, and plot the envelopes used in the DX7_NNN synth for each operator.

\write = generate synthdefs, post analysis information, and write all data to a the analysis folder in the same directory as this one. Analysis are all separate documents and time-stamped to avoid overwriting.

*/

// -- 2.a AUDITION PRESETS (no flag)
(
fork {
	// MIDI number, velocity, preset #
	~mainCaller.value(55, 90, 386);
	3.wait;
	// Note Off message
	~mainCaller.value(55, 0);
}
)


~mainCaller.value(55, 90, 4,\def);

// -- 2.b POST SYNTHDEFS TO POST WINDOW

~mainCaller.value(55, 90, 6);

40.do({|i|
	~mainCaller.value(55, 90, i, \def);
	// 0.01.wait;
});

// -- 2.c POST SYNTHDEF ANALYSIS TO POST WINDOW

~mainCaller.value(55, 90, 406, \analysis);

// -- 2.d POST SYNTHDEFS AND ANALYSIS TO POST WINDOW AND WRITE TO FILE



/* -- 3 -- Once you run the above, you can call for your LFO (fx) and DX7 synths as below. Be sure the preset number you enter above is used below. Here, we use preset 406. You can use the synths normally, just be sure the DX7 synth is after (tail) the lfo (InfEfx) synth.

*/
(
Synth('InfEfx_404');
// Synth('DX7_406', [\pitch, 60.midicps], addAction:'addToTail');
)

Synth('InfEfx_404');



"/tmp/analysis/analysis_1744757076.scd".load

( // init
	~busMeAmp = Bus.audio(s, 1); // private buses used for LFO pitch and amplitudes
	~busMePitch = Bus.audio(s, 1); // " "
	// ~mainCaller = ("/Users/will/gitStuff/DX7-P/DX7-tidal.scd").load;
	// ~mainCaller = ("/Users/will/.config/tidal/init/synths/DX7-t.scd").load;
	~mainCaller = ("/Users/will/.config/tidal/init/synths/dx7-3-tidal.scd").load;
	// ~mainCaller.value(55, 90, 406, \def);
	// ~mainCaller = ("/tmp/scdx7.scd").load;
	// ~mainCaller.value(52, 90, 2);
)


(
~mainCaller = ("/Users/will/.config/tidal/init/synths/dx7-3-tidal.scd").load;
~hhh = ~defme2.value(55, 90, 1);
// ~hhh.postln;
// 2+2;
)

~hhh.comp;

~mainCaller.value(55, 90, 1, \def);

(
var presetCount = 3;
~mainCaller = ("/Users/will/.config/tidal/init/synths/dx7-3-tidal.scd").load;
~dx7_presets = Array.newClear(presetCount);
~dx7_presets_param_names = Array.newClear(presetCount);
~dx7_presets_values = Array.newClear(presetCount);

presetCount.do({|i|
	var huh;
	huh = ~defme2.value(55, 90, i);
	~dx7_presets[i] = huh;
	~dx7_presets_param_names = huh.select({|preset,idx| idx.even });
	~dx7_presets_values[i] = huh.select({|preset,idx| idx.odd });
});

~dx7_presets.writeArchive("/tmp/dx7_presets.scd".standardizePath);

)





~dx7_presets_param_names.do(_.postln);

~dx7_presets[0].select({|preset,idx| idx.odd });

Help.gui

~loadedData = Object.readArchive("/tmp/dx7_presets.scd".standardizePath);


~mainCaller.value(55, 90, 80, \write, "/tmp/");

~mainCaller.value(55, 90, 0, \write, "/tmp/");


~loadedData.postln; // Verify the loaded data

~loadedData[0];



~loadedData[0].size;


(
	350.do({|index|
	if(index % 2 == 0,{
		index.post;
		" ".post;
		~loadedData[80][index].post;
		" ".post;
		~loadedData[80][index + 1].post;
		" ".postln;
	},{
	});
});

"done ".postln;
)

~loadedData[0]
~loadedData[1]

~presets.at(1).postln;






// Example array of arrays
~myData = [ [1, 2, 3], [4.5, 6.7], ["a", "b", "c"] ];

// Save to a file
~myData.writeArchive("/tmp/my_data.scd".standardizePath);

// Later, load it back
~loadedData = Object.readArchive("~/my_data.scd".standardizePath);
~loadedData.postln; // Verify the loaded data

Help.gui






~dx7_presets_param_names.do({|param,index|
	param.post;
	" = h.value(".post;
	param.post;
	", ".post;
	index.post;
	");".postln;
});

~dx7_presets_values[3][42]


(
~setParamsFromPreset = {|presetIndex|
	var presetParams = ~loadedData[presetIndex];
	var outMult = presetParams[0];
	var dn0 = presetParams[1];
	var dn1 = presetParams[2];
	var dn2 = presetParams[3];
	var dn3 = presetParams[4];
	var dn4 = presetParams[5];
	var dn5 = presetParams[6];
	var dn6 = presetParams[7];
	var dn7 = presetParams[8];
	var dn8 = presetParams[9];
	var dn9 = presetParams[10];
	var dn10 = presetParams[11];
	var dn11 = presetParams[12];
	var dn12 = presetParams[13];
	var dn13 = presetParams[14];
	var dn14 = presetParams[15];
	var dn15 = presetParams[16];
	var dn16 = presetParams[17];
	var dn17 = presetParams[18];
	var dn18 = presetParams[19];
	var dn20 = presetParams[20];
	var dn21 = presetParams[21];
	var dn22 = presetParams[22];
	var dn23 = presetParams[23];
	var dn24 = presetParams[24];
	var dn25 = presetParams[25];
	var dn26 = presetParams[26];
	var dn27 = presetParams[27];
	var dn28 = presetParams[28];
	var dn29 = presetParams[29];
	var dn30 = presetParams[30];
	var dn31 = presetParams[31];
	var dn32 = presetParams[32];
	var dn33 = presetParams[33];
	var dn34 = presetParams[34];
	var dn35 = presetParams[35];
	var dn36 = presetParams[36];
	var dn37 = presetParams[37];
	var dn38 = presetParams[38];
	var dn39 = presetParams[39];
	var dn40 = presetParams[40];
	var dn41 = presetParams[41];
	var pitch = presetParams[42];
	var amp = presetParams[43];
	// var coars1 = presetParams[44];
	// var fine_1 = presetParams[45];
	var detun1 = presetParams[46];
	var noteBlok1 = presetParams[47];
	// var coars2 = presetParams[48];
	// var fine_2 = presetParams[49];
	var detun2 = presetParams[50];
	var noteBlok2 = presetParams[51];
	// var coars3 = presetParams[52];
	// var fine_3 = presetParams[53];
	var detun3 = presetParams[54];
	var noteBlok3 = presetParams[55];
	// var coars4 = presetParams[56];
	// var fine_4 = presetParams[57];
	var detun4 = presetParams[58];
	var noteBlok4 = presetParams[59];
	// var coars5 = presetParams[60];
	// var fine_5 = presetParams[61];
	var detun5 = presetParams[62];
	var noteBlok5 = presetParams[63];
	// var coars6 = presetParams[64];
	// var fine_6 = presetParams[65];
	var detun6 = presetParams[66];
	var noteBlok6 = presetParams[67];
	var coars1 = presetParams[68];
	var fine_1 = presetParams[69]	;
	var env1L0 = presetParams[70];
	var env1L1 = presetParams[71];
	var env1L2 = presetParams[72];
	var env1L3 = presetParams[73];
	var env1L4 = presetParams[74];
	var env1R0 = presetParams[75];
	var env1R1 = presetParams[76];
	var env1R2 = presetParams[77];
	var env1R3 = presetParams[78];
	var env1C0 = presetParams[79];
	var env1C1 = presetParams[80];
	var env1C2 = presetParams[81];
	var env1C3 = presetParams[82];
	var modSens1 = presetParams[83];
	var coars2 = presetParams[84];
	var fine_2 = presetParams[85];
	var env2L0 = presetParams[86];
	var env2L1 = presetParams[87];
	var env2L2 = presetParams[88];
	var env2L3 = presetParams[89];
	var env2L4 = presetParams[90];
	var env2R0 = presetParams[91];
	var env2R1 = presetParams[92];
	var env2R2 = presetParams[93];
	var env2R3 = presetParams[94];
	var env2C0 = presetParams[95];
	var env2C1 = presetParams[96];
	var env2C2 = presetParams[97];
	var env2C3 = presetParams[98];
	var modSens2 = presetParams[99];
	var coars3 = presetParams[100];
	var fine_3 = presetParams[101];
	var env3L0 = presetParams[102];
	var env3L1 = presetParams[103];
	var env3L2 = presetParams[104];
	var env3L3 = presetParams[105];
	var env3L4 = presetParams[106];
	var env3R0 = presetParams[107];
	var env3R1 = presetParams[108];
	var env3R2 = presetParams[109];
	var env3R3 = presetParams[110];
	var env3C0 = presetParams[111];
	var env3C1 = presetParams[112];
	var env3C2 = presetParams[113];
	var env3C3 = presetParams[114];
	var modSens3 = presetParams[115];
	var coars4 = presetParams[116];
	var fine_4 = presetParams[117];
	var env4L0 = presetParams[118]	;
	var env4L1 = presetParams[119];
	var env4L2 = presetParams[120];
	var env4L3 = presetParams[121];
	var env4L4 = presetParams[122];
	var env4R0 = presetParams[123];
	var env4R1 = presetParams[124];
	var env4R2 = presetParams[125];
	var env4R3 = presetParams[126];
	var env4C0 = presetParams[127];
	var env4C1 = presetParams[128];
	var env4C2 = presetParams[129];
	var env4C3 = presetParams[130];
	var modSens4 = presetParams[131];
	var coars5 = presetParams[132];
	var fine_5 = presetParams[133];
	var env5L0 = presetParams[134];
	var env5L1 = presetParams[135];
	var env5L2 = presetParams[136];
	var env5L3 = presetParams[137];
	var env5L4 = presetParams[138];
	var env5R0 = presetParams[139];
	var env5R1 = presetParams[140];
	var env5R2 = presetParams[141];
	var env5R3 = presetParams[142];
	var env5C0 = presetParams[143];
	var env5C1 = presetParams[144];
	var env5C2 = presetParams[145];
	var env5C3 = presetParams[146];
	var modSens5 = presetParams[147];
	var coars6 = presetParams[148];
	var fine_6 = presetParams[149];
	var env6L0 = presetParams[150];
	var env6L1 = presetParams[151];
	var env6L2 = presetParams[152];
	var env6L3 = presetParams[153];
	var env6L4 = presetParams[154];
	var env6R0 = presetParams[155];
	var env6R1 = presetParams[156];
	var env6R2 = presetParams[157];
	var env6R3 = presetParams[158];
	var env6C0 = presetParams[159];
	var env6C1 = presetParams[160];
	var env6C2 = presetParams[161];
	var env6C3 = presetParams[162];
	var modSens6 = presetParams[163];
	var envPL0 = presetParams[164];
	var envPL1 = presetParams[165];
	var envPL2 = presetParams[166];
	var envPL3 = presetParams[167];
	var envPL4 = presetParams[168];
	var envPR0 = presetParams[169];
	var envPR1 = presetParams[170];
	var envPR2 = presetParams[171];
	var envPR3 = presetParams[172];
	var osc_sync = presetParams[173];
}
)


Help.gui



// EACH PARAMETER AS A BUFFER, 



~busMeAmp = Bus.audio(s, 1); // private buses used for LFO pitch and amplitudes
~busMePitch = Bus.audio(s, 1); // " "



~dx7_presets_values.plot;

~dx7_preset_buffer.plot;




SuperDirt.postTidalParameters([\DX7_tst]);

Synth("DX7_tst");



~dx7_preset_buffer = Buffer.alloc(s, 3 * ~dx7_presets_values[0].size, ~dx7_presets_values[0].size); // 4 presets with 4 parameters each
~dx7_preset_buffer.setn(0, ~dx7_presets_values.flat);
~dx7_preset_buffer.plot;


~dx7_preset_buffer.getToFloatArray(wait:0.01,action:{arg array; a = array; { a.plot }.defer; "done".postln });




~dx7_presets_values[0].size
~dx7_preset_buffer = Buffer.alloc(s, ~dx7_presets_values[0].size,1); // 4 presets with 4 parameters each
// ~dx7_preset_buffer.setn(0, Array.fill(~dx7_presets_values[0].size, { rrand(0,1) }));
~dx7_preset_buffer.setn(0, );


s.dumpOSC(1)

~dx7_preset_buffer.plot;

~dx7_preset_buffer.setn(0, ~dx7_presets_values.flat);
~dx7_preset_buffer.getToFloatArray(wait:0.01,action:{arg array; a = array; { a.plot }.defer; "done".postln });

~dx7_preset_buffer.plot
~dx7_presets_values[4]

Help.gui
"/Users/will/.config/tidal/init/synths/dx7_test.scd".load;

~dx7_presets_values.collect({|preset,index| preset})

~dx7_preset_buffer.plot;
~dx7_preset_buffer = Buffer.alloc(s, ~dx7_presetCount * ~dx7_presets_values[0].size, 1);
~dx7_preset_buffer.setn(0, ~dx7_presets_values.flat);
~dx7_preset_buffer.plot;

~dx7_preset_buffer.setn(0, Array.fill(~dx7_presetCount * ~dx7_presets_values[0].size, { rrand(0,1) }));

~dx7_preset_buffer.numChannels
~dx7_preset_buffer.getn(0,0,{|x| x.postln});

~jjj = In.kr(175, ~dx7_preset_buffer, 0);

~dx7_preset_buffer.numChannels

{~jjj}.play;


~dx7_preset_buffer.get(2,{|x| x.postln});

SynthDef('DX7_hhh',{
	arg out, presetIndex, hhh;
	var val0 = BufRd.kr(1, ~dx7_preset_buffer, hhh + (presetIndex * 175));
	// var val1 = BufRd.kr(1, ~dx7_preset_buffer, 1 + presetIndex * 175,0,0);
	// var val2 = BufRd.kr(1, ~dx7_preset_buffer, 2 + presetIndex * 175,0,0);
	// var val3 = BufRd.kr(1, ~dx7_preset_buffer, 3 + presetIndex * 175,0,0);
	// var val4 = BufRd.kr(1, ~dx7_preset_buffer, 4 + presetIndex * 175,0,0);
	// var val5 = BufRd.kr(1, ~dx7_preset_buffer, 5 + presetIndex * 175,0,0);
	// var val6 = BufRd.kr(1, ~dx7_preset_buffer, 6 + presetIndex * 175,0,0);
	// var val7 = BufRd.kr(1, ~dx7_preset_buffer, 7 + presetIndex * 175,0,0);
	
	

	// ~dx7_preset_buffer.get(0,80,{|x| x.postln});
	// val0.poll;
	// val1.poll;
	val0.poll;
	// val3.poll;
	// val4.poll;
	// val5.poll;
	// val6.poll;
	// val7.poll;
	Out.ar(0, 0 ! 2);
}).add;


~dx7_presets_values[0][2]


~dx7_preset_buffer.getn(0,80,{|x| x.postln});

~dx7_presets_values[0].flat

~dx7_presets_values[0]

~dx7_preset_buffer

(
Synth('InfEfx_tst');
Synth('DX7_tst');
)

Help.gui

~mainCaller.value(55, 90, 0);

~mainCaller.value(55, 90, 10,\def);


~tst =  BufRd.kr(~dx7_preset_buffer.numChannels, ~dx7_preset_buffer, 0 , ~dx7_presets_values[0].size, 1);

~tst[0].poll;

~jjj = In.kr(175, ~dx7_preset_buffer, 0);


~jjj[0].poll


// First, create the 4-channel control bus
~control_bus_4 = Bus.control(s, 4);

// SynthDef to set the control values
SynthDef(\control_setter, {
    |freq=440, amp=0.5, pan=0, cutoff=1000|
    // Output all 4 control values to the bus
    ReplaceOut.kr(~control_bus_4, [freq, amp, pan, cutoff]);
}).add;

// SynthDef that uses the control values
SynthDef(\control_reader, {
    |out=0|
    var sig, controls, freq, amp, pan, cutoff;
    
    controls = In.kr(~control_bus_4, 4);
    
    // Unpack the controls for clarity
    freq = controls[0];
    amp = controls[1];
    pan = controls[2];
    cutoff = controls[3];
    
    // Create a simple synth using these parameters
    sig = LPF.ar(
        Pan2.ar(
            SinOsc.ar(freq) * amp,
            pan
        ),
        cutoff
    );
    
    ReplaceOut.ar(out, sig);
}).add;

~control_bus_4.setn(440,4);



// Create the control setter first
Synth(\control_setter, [
    \freq, 440,
    \amp, 0.3,
    \pan, -0.5,
    \cutoff, 2000
]);

// Then create the synth that reads those controls
Synth(\control_reader);

// You can update the controls at any time by creating a new control_setter
Synth(\control_setter, [
    \freq, 820,
    \amp, 0.4,
    \pan, 0.5,
    \cutoff, 1000
]);







~dx7_presets_values.size


~dx7_presetCount = 10;
~dx7_preset_buffer = Buffer.alloc(s, ~dx7_presetCount * ~dx7_presets_values[0].size + 200); // 4 presets with 4 parameters each

~dx7_preset_buffer
~dx7_preset_buffer.loadCollection(~dx7_presets_values.flat);

~dx7_preset_buffer.plot;
~dx7_presets_values.flat.plot;

Help.gui

(
"/Users/will/.config/tidal/init/synths/dx7_test.scd".load;
// ~dx7_preset_buffer.setn(0, ~dx7_presets_values.flat);
)

s.dumpOSC(0)



// First, create the 4-channel control bus
~control_bus_4 = Bus.control(s, 4);

// Create a buffer to store presets
~preset_buffer = Buffer.alloc(s, 16, 4); // 4 presets with 4 parameters each

// Fill the buffer with preset data
~preset_buffer.setn(0, [
    // Preset 0: [freq, amp, pan, cutoff]
    640, 0.3, -0.5, 2000,
    // Preset 1
    1280, 0.3, -0.5, 2000,
    // Preset 2
    560, 0.3, -0.6, 1500,
    // Preset 3
    220, 0.5, -0.2, 1000
]);

// SynthDef to set the control values
SynthDef(\control_setter, {
    |freq=(-1),amp=(-1),pan=(-1),cutoff=(-1), presetIndex=0, buf|
    // Output all 4 control values to the bus
    var preset_values = BufRd.kr(4, ~preset_buffer, presetIndex , 0, 0);
    
	var c_freq = Select.kr((freq+1).clip(0,1), [preset_values[0], freq]);
    var c_amp = Select.kr((amp+1).clip(0,1), [preset_values[1], amp]);
    var c_pan = Select.kr((pan+1).clip(0,1), [preset_values[2], pan]);
    var c_cutoff = Select.kr((cutoff+1).clip(0,1), [preset_values[3], cutoff]);

    // just to free self
    var hh = EnvGen.kr(Env.linen(0.01,0.8,0.01),doneAction:2);

	// preset_values[0].poll;
	// (j).poll;

    
    // Debug output
    c_freq.poll(1, "c_freq");
	// buf.poll;
	// preset_values.poll;
    
    ReplaceOut.kr(~control_bus_4, [c_freq, c_amp, c_pan, c_cutoff]);
}).add;

nil.isNil

// SynthDef that uses the control values
SynthDef(\control_reader, {
    |out=0|
    var sig, controls;
    
    // Read all 4 controls from the bus
    controls = In.kr(~control_bus_4, 4);
    
    // controls.poll;
    
    // Create a simple synth using these parameters
    sig = LPF.ar(
        Pan2.ar(
            SinOsc.ar(controls[0]) * controls[1],
            controls[2]
        ),
        controls[3]
    );
    
    Out.ar(out, sig);
}).add;

(

// Create a single persistent control setter and store it in a variable
~setter = Synth(\control_setter, [
    // \freq, 840,
    \amp, 0.3,
    \pan, -0.5,
    \cutoff, 2000,
    \presetIndex, 2,
    \buf, ~preset_buffer
]);

// Create the reader
~reader = Synth(\control_reader);
)

// Now you can update parameters using .set

~setter.set(\freq,220);



-1.clip(0,1)



----------


// First, create the 4-channel control bus
~control_bus_4 = Bus.control(s, 4);

// Create a buffer to store presets
~preset_buffer = Buffer.alloc(s, 16, 4); // 4 presets with 4 parameters each

// Fill the buffer with preset data
~preset_buffer.setn(0, [
    // Preset 0: [freq, amp, pan, cutoff]
    640, 0.3, -0.5, 2000,
    // Preset 1
    1280, 0.3, -0.5, 2000,
    // Preset 2
    560, 0.3, -0.6, 1500,
    // Preset 3
    220, 0.5, -0.2, 1000
]);

// SynthDef to set the control values
SynthDef(\control_setter, {
    |freq=(-1),amp=(-1),pan=(-1),cutoff=(-1), presetIndex=0, buf|
    // Output all 4 control values to the bus

	// preset_values[0].poll;
	// (j).poll;

    
    // Debug output
    c_freq.poll(1, "c_freq");
	// buf.poll;
	// preset_values.poll;
    
    ReplaceOut.kr(~control_bus_4, [c_freq, c_amp, c_pan, c_cutoff]);
}).add;

nil.isNil


x = {arg param,preset_values;
Select.kr((param+1).clip(0,1), [preset_values[0], param]);
}


// SynthDef that uses the control values
SynthDef(\control_reader, {
    |out=0, freq=(-1), amp=(-1), pan=(-1), cutoff=(-1)|
    var sig;
    
    // Read all 4 controls from the bus
    // var controls = In.kr(~control_bus_4, 4);



    var preset_values = BufRd.kr(4, ~preset_buffer, \presetIndex.kr(0) , 0, 0);
    
	var c_freq = Select.kr((freq+1).clip(0,1), [preset_values[0], freq]);
    var c_amp = Select.kr((amp+1).clip(0,1), [preset_values[1], amp]);
    var c_pan = Select.kr((pan+1).clip(0,1), [preset_values[2], pan]);
    var c_cutoff = Select.kr((cutoff+1).clip(0,1), [preset_values[3], cutoff]);

    // just to free self
    var hh = EnvGen.kr(Env.linen(0.01,0.8,0.01),doneAction:2);
    
    // controls.poll;
    
    // Create a simple synth using these parameters
    sig = LPF.ar(
        Pan2.ar(
            SinOsc.ar(c_freq) * c_amp,
            c_pan
        ),
        c_cutoff
    );
    
    Out.ar(out, sig);
}).add;

(

// Create a single persistent control setter and store it in a variable
~setter = Synth(\control_setter, [
    // \freq, 840,
    \amp, 0.3,
    \pan, -0.5,
    \cutoff, 2000,
    \presetIndex, 2,
    \buf, ~preset_buffer
]);

// Create the reader
~reader = Synth(\control_reader);
)


// Create a single persistent control setter and store it in a variable
~setter = Synth(\control_reader, [
    // \freq, 840,
    \amp, 0.3,
    \pan, -0.5,
    \cutoff, 2000,
    \presetIndex, 0,
    \buf, ~preset_buffer
]);

// Now you can update parameters using .set

~setter.set(\freq,220);



-1.clip(0,1)











// Your input array (example with 5 values)
~myArray = [0.1, 0.5, -0.3, 0.8, 0.0];

// Create a buffer with:
// - numFrames: 1 (single sample per channel)
// - numChannels: size of your array
~multiChannelBuffer = Buffer.alloc(s, 1, ~myArray.size);

// Set each channel's single sample from the array
~myArray.do { |val, i|
    ~multiChannelBuffer.setn(i, [val]);
};

// Verify
~multiChannelBuffer.plot; // Shows multiple channels with single samples





~dx7_preset_buffer = Buffer.alloc(s, ~preset_buffer.numChannels, ~dx7_presets_values[0].size);

~dx7_preset_buffer.

~dx7_presets_values[0].do({|value,index|
	~dx7_preset_buffer.setn(index, [value]);
});

~dx7_preset_buffer.plot;

~ahhhh = BufRd.kr(1, ~dx7_preset_buffer, 0, 0, 0);

~heh = b.getn(0,1,{|x| x.postln}.defer);

~heh

~ahhhh;

~ahhhh.get(0,{|x| x.postln});



